TODO:
   possibly make variable-length instructions and have bigger address space
   switch to 16-byte instructions for performance reasons
      -makes code twice as long, but should increase performance because bit-shifting is expensive
%reg
@addr
#const
'label

'labels can only be used with 1-argument calls


instead of enum for each type, have and flags for const, reg or mem.
in Machine execution, instead of doing manual comparison if (MOVrr) r[c.rr.r1], can have function get(type, value)
kasm parsing and generating can be done separately

/*
typedef uint8_t Instr;
typedef uint8_t Reg;
typedef uint16_t Mem;
typedef uint32_t Const;
*/


//enum class Instruction : uint8_t { NOP, MOV, PUSH, POP, LEA, ADD, SUB, INC, DEC, CMP };

/*
uint16_t    0-65535
uint8_t     0-255

memory   0-65,535
   io    50,000-65,535
   stack 40,000-49,999

nop
mov   reg/mem,       reg/mem/const
push  reg/mem/const
pop   reg/mem
lea   reg,           mem
   loads address of mem into reg
add   reg/mem,       reg/mem/const
sub   reg/mem,       reg/mem/const
inc   reg/mem
dec   reg/mem
cmp
*/

//command
//[0-7] [8-15][16-23] [24-31]
//inst      addr        reg


/*struct Cmd {
   union {
      struct {
         uint8_t i;
         uint8_t r;
      } r;
      struct {
         uint8_t i;
         uint16_t m;
      } m;
      struct {
         uint8_t i;
         uint32_t c;
      } c;
      struct {
         uint8_t i;
         uint8_t r1;
         uint8_t r2;
      } rr;
      struct {
         uint8_t i;
         uint8_t r;
         uint16_t a;
      } rm;
      struct {
         uint8_t i;
         uint16_t a;
         uint8_t r;
      } mr;
      struct {
         uint8_t i;
         uint8_t r;
         uint32_t c;
      } rc;
      struct {
         uint8_t i;
         uint16_t a;
         uint32_t c;
      } mc;
      uint64_t uint64;
      uint8_t i;
   };
};*/

/*
inline cmd inst(Instr i) {
   cmd ret;
   ret.i = i;
   return ret;
}
inline cmd inst(Instr i, Reg r) {
   cmd ret;
   ret.r = {i, r};
   return ret;
}
inline cmd inst(Instr i, Mem m) {
   cmd ret;
   ret.m = {i, m};
   return ret;
}
inline cmd inst(Instr i, Const c) {
   cmd ret;
   ret.c = {i, c};
   return ret;
}
inline cmd inst(Instr i, Reg r1, Reg r2) {
   cmd ret;
   ret.rr = {i, r1, r2};
   return ret;
}
inline cmd inst(Instr i, Reg r, Mem m) {
   cmd ret;
   ret.rm = {i, r, m};
   return ret;
}
inline cmd inst(Instr i, Mem m, Reg r) {
   cmd ret;
   ret.mr = {i, m, r};
   return ret;
}
//cmd_rr
//cmd_rm
//cmd_mr
inline cmd inst(Instr i, Reg r, Const c) {
   cmd ret;
   ret.rc = {i, r, c};
   return ret;
}
inline cmd inst(Instr i, Mem m, Const c) {
   cmd ret;
   ret.mc = {i, m, c};
   return ret;
}

http://ref.x86asm.net/coder64.html
http://stackoverflow.com/questions/6019843/how-to-interpret-the-opcode-manually
http://stackoverflow.com/questions/6401586/intel-x86-opcode-reference

